[general]
# A folder where vdirsyncer can store some metadata about each pair.
status_path = "~/.vdirsyncer/status/"

# CARDDAV
[pair personal_contacts]
# A `[pair <name>]` block defines two storages `a` and `b` that should be
# synchronized. The definition of these storages follows in `[storage <name>]`
# blocks. This is similar to accounts in OfflineIMAP.
a = "personal_contacts_local"
b = "personal_contacts_remote"
collections = ["personal"]
metadata = ["displayname"]
conflict_resolution = "a wins"

# To resolve a conflict the following values are possible:
#   `null` - abort when collisions occur (default)
#   `"a wins"` - assume a's items to be more up-to-date
#   `"b wins"` - assume b's items to be more up-to-date
#conflict_resolution = null

[storage personal_contacts_local]
# A storage references actual data on a remote server or on the local disk.
# Similar to repositories in OfflineIMAP.
type = "filesystem"
path = "~/.contacts/"
fileext = ".vcf"

[storage personal_contacts_remote]
type = "carddav"
url = "https://owncloud.lausen.nl/remote.php/dav/addressbooks/users/leonard/"
username.fetch = ["command", "pass", "vdirsyncer-username"]
password.fetch = ["command", "pass", "vdirsyncer-password"]

# CALDAV
[pair personal_calendar]
a = "personal_calendar_local"
b = "personal_calendar_remote"
collections = ["personal"]
# Calendars also have a color property
metadata = ["displayname", "color"]
conflict_resolution = "a wins"

# To resolve a conflict the following values are possible:
#   `null` - abort when collisions occur (default)
#   `"a wins"` - assume a's items to be more up-to-date
#   `"b wins"` - assume b's items to be more up-to-date
#conflict_resolution = null

[storage personal_calendar_local]
type = "filesystem"
path = "~/.calendars/"
fileext = ".ics"

[storage personal_calendar_remote]
type = "caldav"
url = "https://owncloud.lausen.nl/remote.php/dav/calendars/leonard/"
username.fetch = ["command", "pass", "vdirsyncer-username"]
password.fetch = ["command", "pass", "vdirsyncer-password"]
